pipeline {
    agent any

    tools {
        maven 'maven'  // ‚úÖ Ensures Maven is installed
    }

    environment {
        SERVICE_ACCOUNT = credentials('service_account')  // ‚úÖ GCP service account JSON (secret file in Jenkins)
        PROJECT_ID = credentials('project_id')  // ‚úÖ Correct Project ID (sound-micron-452613-u0)
        IMAGE_NAME = 'binwebappv2'
        REGION = 'northamerica-northeast2'
        CLUSTER_NAME = 'my-cluster'  // ‚úÖ Ensure this is the correct cluster name
    }

    stages {
        stage('Init') {
            steps {
                sh 'echo "üöÄ Start of Job"'
                sh 'ls -la'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn clean test -f ./BinaryCalculatorWebapp/pom.xml'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn package -DskipTests -f ./BinaryCalculatorWebapp/pom.xml'
            }
        }

        stage('Authenticate with Google Cloud') {
            steps {
                script {
                    sh 'gcloud auth activate-service-account --key-file=${SERVICE_ACCOUNT}'
                    sh 'gcloud config set project ${PROJECT_ID}'
                }
            }
        }

        stage('Build and Submit to Google Cloud Build') {
            steps {
                script {
                    sh 'gcloud builds submit --tag gcr.io/${PROJECT_ID}/${IMAGE_NAME} --suppress-logs'
                }
            }
        }

        stage('Deploy to Google Kubernetes Engine') {
            steps {
                script {
                    // ‚úÖ Fetch cluster credentials (ensures correct region)
                    sh 'gcloud container clusters get-credentials ${CLUSTER_NAME} --region=${REGION}'

                    // ‚úÖ Deploy to Kubernetes (overwrite existing deployment if it exists)
                    sh '''
                    kubectl delete deployment binarycalculator-deployment || true
                    kubectl create deployment binarycalculator-deployment --image=gcr.io/${PROJECT_ID}/${IMAGE_NAME} --port=8080
                    '''

                    // ‚úÖ Expose the service (if not already exposed)
                    sh '''
                    if ! kubectl get service binarycalculator-service > /dev/null 2>&1; then
                        kubectl expose deployment binarycalculator-deployment --type=LoadBalancer --name=binarycalculator-service
                    fi
                    '''

                    // ‚úÖ Display the public IP of the service
                    sh "kubectl get service binarycalculator-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
                }
            }
        }

        stage('Deploy') {
            steps {
                sh 'echo "üöÄ Deployment Completed Successfully!"'
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build and Deployment Successful!'
        }
        failure {
            echo '‚ùå Build or Deployment Failed! Check logs for details.'
        }
    }
}
